/** Problem 72. Edit Distance 
https://leetcode.com/problems/edit-distance/description/

Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character

**/

class EditDistance{


    public int minDistance(String word1, String word2) {
        if(word1 == null && word2 == null)
            return 0;
        if(word1 == null || word1.length() == 0)
            return word2.length();
        if(word2 == null || word2.length() == 0)
            return word1.length();
        
        int[][] a = new int[word1.length()+1][word2.length()+1];
        char[] w1 = new char[word1.length()+1];
        
        for(int i =1;i<=word1.length() ;i++){
            w1[i] = word1.charAt(i-1);
            a[i][0] = i;
        }
        
        char[] w2 = new char[word2.length()+1];
        for(int i =1;i<=word2.length() ;i++){
            w2[i] = word2.charAt(i-1);            
            a[0][i] = i;
        }
        
        
        for(int i =1;i<= word1.length();i++){
            for(int j = 1; j <= word2.length(); j++){
                if(w1[i] == w2[j])
                    a[i][j] = a[i-1][j-1];
                else{
                    a[i-1][j-1] = Math.min(a[i][j-1],a[i-1][j-1]);
                    a[i][j] = Math.min(a[i-1][j],a[i-1][j-1]) + 1;
                }
                
                
            }
        }
        return a[word1.length()][word2.length()];
    }
}